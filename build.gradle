
buildscript {
    ext.jumpaku_commons_version = '1.0.0'
    ext.kotlin_version = '1.3.40'
    ext.jvm_version = '1.8'
    ext.dokka_version = '0.9.17'
    ext.dependencyVersions = [
            'junit4'       : '4.12',
            'junit5'       : '5.1.0',
            'hamcrest'     : '2.1',
            'commons_math3': '3.6.1',
            'kotson'       : '2.5.0',
    ]

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

// Common configuration
subprojects {

    apply plugin: 'kotlin'
    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: 'org.jetbrains.dokka'

    group 'jumpaku'
    version jumpaku_commons_version

    repositories {
        mavenCentral()
        jcenter()
    }

    compileKotlin {
        kotlinOptions.jvmTarget = jvm_version
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = jvm_version
    }

    sourceCompatibility = 1.8

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

        compile "org.apache.commons:commons-math3:${dependencyVersions.commons_math3}"
        compile "com.github.salomonbrys.kotson:kotson:${dependencyVersions.kotson}"
    }

    // Documentation
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }
    artifacts {
        archives sourcesJar
        archives javadocJar
    }
    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"
    }

    // Publishing
    /**
     * To run uploadArchives,  ./gradlew uploadArchives -Pargs="`user id of nexus.jumpaku.net` `password`"
     */
    uploadArchives {
        def args = project.hasProperty("args") ? project.findProperty("args").split(/\s+/) : []
        def nexusUsername = args.size() >= 1 ? args[0] : "UNKNOWN USER"
        def nexusPassword = args.size() >= 2 ? args[1] : "NO PASSWORD"
        def nexusUrl = "https://nexus.jumpaku.net"
        repositories {
            mavenDeployer {
                def releaseUrl = "${nexusUrl}/repository/maven-releases/"
                repository(url: releaseUrl) {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
                def snapshotUrl = "${nexusUrl}/repository/maven-snapshots/"
                snapshotRepository(url: snapshotUrl) {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
            }
        }
    }
}

project(':jumpaku-commons') {
}

project(':jumpaku-commons-test') {

    dependencies {
        compile project(':jumpaku-commons')
        compile "org.hamcrest:hamcrest:${dependencyVersions.hamcrest}"

        testCompileOnly "junit:junit:${dependencyVersions.junit4}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${dependencyVersions.junit5}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${dependencyVersions.junit5}"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${dependencyVersions.junit5}"
    }
}